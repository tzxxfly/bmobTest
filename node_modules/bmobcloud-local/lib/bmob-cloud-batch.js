//批量操作对象
//为了减少因为网络通讯次数太多而带来的时间浪费, 您使用使用下面的批量(batch)操作，在一个请求中对多个普通对象(不支持系统内置的用户对象)进行添加(create)、更新(update)、删除(delete) 操作，上限为50个。

var __Request = require("./../bmob-cloud-common").Request;
var assert = require("assert");

module.exports = (function () {
    var model = {};

    /**
     为了减少因为网络通讯次数太多而带来的时间浪费, 您使用使用下面的批量(batch)操作，在一个请求中对多个普通对象(不支持系统内置的用户对象)进行添加(create)、更新(update)、删除(delete) 操作，上限为50个。

     function onRequest(request, response, modules) {
     //获取数组对象
     var bat = modules.oBatch;

     //批量操作
     bat.exec({
     "data":{
     "requests": [
     {
     "method": "POST",
     "path": "/1/classes/GameScore",
     "body": {
     "score": 1337,
     "playerName": "Sean Plott"
     }
     },
     {
     "method": "POST",
     "path": "/1/classes/GameScore",
     "body": {
     "score": 1338,
     "playerName": "ZeroCool"
     }
     }
     ]
     }
     },function(err,data){
     //回调函数
     });
     }
     批量操作的响应会是一个列表, 列表的返回值个数同给定的requests请求个数是相等的。列表中每个返回项都有一个字段是 "success" 或者 "error"， "success" 的值是通常是和你进行其他REST操作成功时返回的值是一样的:

     {
     "success": {
     "createdAt": "2012-06-15T16:59:11.276Z",
     "objectId": "51c3ba67e4b0f0e851c16221"
     }
     }
     "error" 的值是有返回码和错误信息字符串的一个对象:

     {
     "error": {
     "code": 101,
     "error": "object not found for delete"
     }
     }
     在 batch 操作中更新(update)和删除(delete)同样是有效的:

     function onRequest(request, response, modules) {
     //获取数组对象
     var bat = modules.oBatch;

     //批量操作
     bat.exec({
     "data":{
     "requests": [
     {
     "method": "PUT",
     "path": "/1/classes/GameScore/51e3a334e4b0b3eb44adbe1a",
     "body": {
     "score": 999999
     }
     },
     {
     "method": "DELETE",
     "path": "/1/classes/GameScore/51a8a4d9e4b0d034f6159a35"
     }
     ]
     }
     },function(err,data){
     //回调函数
     });
     }
     */
    model.exec = function (request, callback) {
        __Request("batch", null, null, "POST", request.data, callback);
    }

    return model;
})();

