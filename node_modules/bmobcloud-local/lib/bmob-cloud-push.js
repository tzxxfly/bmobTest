//消息推送对象
//推送通知是让用户及时被通知、和你的应用保持联系的一种非常棒的方式，你可以快速而有效地通知到所有的用户，下面这个教程将会教会你使用Bmob来推送消息。

var __Request = require("./../bmob-cloud-common").Request;
var assert = require("assert");

module.exports = (function () {
    var model = {};

    /**
     保存installation
     保存iOS设备的deviceToken

     iOS设备通常使用deviceToken来惟一标识一台设备。

     push.add({
     "data":{
     "deviceType": "ios",
     "deviceToken": "abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789",
     "channels": [
     "Giants"
     ]
     }
     },function(err,data){
     //回调函数
     });
     保存Android设备的installationId

     对于Android设备，SDK会自动生成uuid作为installationId保存到Bmob。 您可以使用以下云端代码保存Android设备的installation ID：

     push.add({
     "data":{
     "deviceType": "android",
     "installationId": "12345678-4312-1234-1234-1234567890ab",
     "channels": [
     "Giants"
     ]
     }
     },function(err,data){
     //回调函数
     });

     保存Windows Phone设备的 notificationUri

     对于Windows Phone设备，BmobSDK会自动从Windows Push Center获取到notificationUri并保存到 Bmob。 你可以使用以下REST API保存Windows Phone设备的notificationUri：

     push.add({
     "data":{
     "deviceType": "windows phone",
     "notificationUri": "https://hk1.notify.live.net/unthrottledthirdparty/01.00/AQHgHh6EuwNtTa1TbwvaAjnmAgAAAAADEAAAAAQUZm52OkZDM0U5RDkxQzIzREJBNDYFBkFTRUEwMQ",
     "channels": [
     "Giants"
     ]
     }
     },function(err,data){
     //回调函数
     });
     */
    model.add = function (request, callback) {
        __Request("push", null, null, 'POST', request.data, callback);
    }

    /**
     你还可以更新Installation对象的更多属性，用来查询installationId，定制更通用的推送：

     push.update({
     "objectId":"400a12ed3a",
     "data":{
     "scores": true,
     "gameResults": true,
     "injuryReports": true
     }
     },function(err,data){
     //回调函数
     });

     订阅频道和退订
     订阅频道

     覆盖已订阅的频道：

     push.update({
     "objectId":"400a12ed3a",
     "data":{
     "channels": [
     "Giants",
     "Mets"
     ]
     }
     },function(err,data){
     //回调函数
     });
     订阅一个新频道，不覆盖已订阅的频道：

     push.update({
     "objectId":"400a12ed3a",
     "data":{
     "channels":{"__op":"AddUnique","objects":["Giants111"]}
     }
     },function(err,data){
     //回调函数
     });

     退订频道

     push.update({
     "objectId":"400a12ed3a",
     "data":{
     "channels":{"__op":"Remove","objects":["Giants","Mets"]}
     }
     },function(err,data){
     //回调函数
     });
     */
    model.update = function (request, callback) {
        assert.ifError(request.objectId == null);

        __Request("push", null, request.objectId, 'PUT', request.data, callback);
    }

    /**
     广播推送消息
     push.send({
     "data":{
     "data": {
     "alert": "Hello From Bmob."
     }
     }
     },function(err,data){
     //回调函数
     });
     组播推送消息
     发送给订阅了Giants频道的用户

     push.send({
     "data":{
     "where":{
     "channels":["Giants"]
     },
     "data": {
     "alert": "Hello From Bmob."
     }
     }
     },function(err,data){删除数据
     //回调函数
     });
     或者更简便的方式

     push.send({
     "data":{
     "channels":["Giants"],
     "data": {
     "alert": "Hello From Bmob."
     }
     }
     },function(err,data){
     //回调函数
     });
     多播推送消息
     推送给不活跃的用户

     push.send({
     "data":{
     "where":{
     "updatedAt":{
     "$lt":{"__type":"Date","iso":"2014-01-29 11:33:53"}
     }
     },
     "data": {
     "alert": "Hello From Bmob."
     }
     }
     },function(err,data){
     //回调函数
     });
     根据查询条件做推送

     push.send({
     "data":{
     "where": {
     "scores": true
     },
     "data": {
     "alert": "Willie Hayes injured by own pop fly."
     }
     }
     },function(err,data){
     //回调函数
     });
     请注意，where 条件查询的都是 installations 表。这里是假设 installations 表存储了 scores 的布尔属性，你可以像查询普通对象一样构造where查询

     根据平台做推送

     push.send({
     "data":{
     "where": {
     "deviceType": "android"
     },
     "data": {
     "alert": "Your suitcase has been filled with tiny robots!"
     }
     }
     },function(err,data){
     //回调函数
     });
     push.send({
     "data":{
     "where": {
     "deviceType": "ios"
     },
     "data": {
     "alert": "Your suitcase has been filled with tiny robots!"
     }
     }
     },function(err,data){
     //回调函数
     });
     根据地理信息位置做推送

     push.send({
     "data":{
     "where": {
     "user": {
     "$inQuery": {
     "location": {
     "$nearSphere": {
     "__type": "GeoPoint",
     "latitude": 30.0,
     "longitude": -20.0
     },
     "$maxDistanceInMiles": 1.0
     }
     }
     }
     },
     "data": {
     "alert": "Free hotdogs at the bmob concession stand!"
     }
     }
     },function(err,data){
     //回调函数
     });
     上面的例子假设 installation 有个 user 属性指向_User 表的记录，并且用户有个 location 属性是 GeoPoint 类型，我们就可以根据地理信息位置做推送。

     点播推送消息
     发送给Android单个客户端

     push.send({
     "data":{
     "where":{
     "installationId":"12345678-4312-1234-1234-1234567890ab"
     },
     "data": {
     "alert": "Hello From Bmob."
     }
     }
     },function(err,data){
     //回调函数
     });
     发送给iOS单个客户端

     push.send({
     "data":{
     "where":{
     "deviceToken":"abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789"
     },
     "data": {
     "alert": "Hello From Bmob."
     }
     }
     },function(err,data){
     //回调函数
     });

     设置消息过期时间

     过期时间，可以是绝对时间：

     push.send({
     "data":{
     "expiration_time": "2015-12-04 00:51:13",
     "data": {
     "alert": "Season tickets on sale until December  4, 2013"
     }
     }
     },function(err,data){
     //回调函数
     });
     也可以是相对时间（根据push_time做定期推送，从push_time时间开始算起，直到expiration_interval时间后过期），下面请求表示消息将在2012-01-28 00:51:13这个时间点开始推送，直到7天后过期:

     push.send({
     "data":{
     "push_time": "2012-01-28 00:51:13",
     "expiration_interval": 518400,
     "data": {
     "alert": "Season tickets on sale until December  4, 2013"
     }
     }
     },function(err,data){
     //回调函数
     });
     */
    model.send = function (request, callback) {
        __Request("push", null, null, 'POST', request.data, callback);
    }

    return model;
})();