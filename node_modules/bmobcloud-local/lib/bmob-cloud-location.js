//地理位置对象
//Bmob允许用户根据地球的经度和纬度坐标进行基于地理位置的信息查询。你可以在查询中添加一个GeoPoint的对象查询。您可以实现轻松查找出离当前用户最接近的信息或地点的功能。

var __Request = require("./../bmob-cloud-common").Request;
var assert = require("assert");

module.exports = (function () {
    var model = {};

    /**
     创建地理位置的示例代码如下：

     function onRequest(request, response, modules) {

     var location = modules.oLocation;

     location.create({
     "table":"GameScore",
     "objectId":"j4w2DDDT",
     "data":{"location":{
     "__type": "GeoPoint",
     "latitude":  12.934755,
     "longitude": 24.52065
     }}
     },function(err,data){
     //回调函数
     });
     }
     */
    model.create = function (request, callback) {
        assert.ifError(request.table == null);

        __Request("classes", request.table, request.objectId, request.objectId == null ? 'POST' : 'PUT', request.data, callback);
    }

    /**
     查询地理位置
     现在您有一系列的对象对应的地理坐标，如果能发现那些对象离指定的点近就好了，这可以通过GeoPoint数据类型加上在查询中使用$nearSphere做到。获取离用户最近的10个地点的实现代码如下：

     location.query({
     "table":"GameScore",
     "limit":10,
     "where":{
     "location": {
     "$nearSphere": {
     "__type": "GeoPoint",
     "latitude": 30.0,
     "longitude": 20.0
     }
     }
     }
     },function(err,data){
     //回调函数
     });
     这会按离纬度30.0，经度-20.0的距离排序返回一系列的结果，第一个就是最近的对象。(注意如果一个特定的order参数给了的话，它会覆盖按距离排序)，例如，下面是两个上面的查询返回的结果：

     {
     "results": [
     {
     "location": {
     "__type": "GeoPoint",
     "latitude": 40.0,
     "longitude": -30.0
     },
     "updatedAt": "2011-12-06 22:36:04",
     "createdAt": "2011-12-06 22:36:04",
     "objectId": "e1kXT22L"
     },
     {
     "location": {
     "__type": "GeoPoint",
     "latitude": 30.0,
     "longitude": 20.0
     },
     "updatedAt": "2011-12-06 22:36:26",
     "createdAt": "2011-12-06 22:36:26",
     "objectId": "51e3a2a8e4b015ead4d95dd9"
     }
     ]
     }
     为了限定搜素的最大举例，需要加入$maxDistanceInMiles和$maxDistanceInKilometers或者$maxDistanceInRadians参数来限定。如，要找半径在10公里内的数据的实现代码如下：

     location.query({
     "table":"GameScore",
     "limit":10,
     "where":{
     "location": {
     "$nearSphere": {
     "__type": "GeoPoint",
     "latitude": 30.0,
     "longitude": 20.0
     },
     "$maxDistanceInKilometers": 10.0
     }
     }
     },function(err,data){
     //回调函数
     });
     同样做查询寻找在一个特定的范围里面的对象也是可以的，为了找到在一个矩形的区域里的对象，按下面的格式加入一个约束 {"$within": {"$box": {[southwestGeoPoint, northeastGeoPoint]}}}，下面是一段示例代码：

     location.query({
     "table":"GameScore",
     "limit":10,
     "where":{
     "location": {
     "$within": {
     "$box": [
     {
     "__type": "GeoPoint",
     "latitude": 37.71,
     "longitude": 22.53
     },
     {
     "__type": "GeoPoint",
     "latitude": 30.82,
     "longitude": 22.37
     }
     ]
     }
     }
     }
     },function(err,data){
     //回调函数
     });
     */
    model.query = function (request, callback) {
        assert.ifError(request.table == null);

        __Request("classes", request.table, null, 'GET', request, callback);
    }

    return model;
})();